{"ast":null,"code":"var _jsxFileName = \"/Users/johannacastagna/Documents/Projet_11/frontend/src/pages/user.jsx\",\n  _s = $RefreshSig$();\nimport { transactionData } from \"../data/data\";\nimport TransactionCard from \"../components/transactionCard\";\nimport { useEffect } from \"react\";\nimport { selectJWT, selectUserLogin, setUserData } from '../store/store'; // Assurez-vous de définir le chemin correct vers votre fichier store.jsx\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiCalls from \"../services/Api\";\nimport { iteneraire } from \"react-router-dom\";\nimport UserProfile from \"../components/userProfile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPage() {\n  _s();\n  let dispatch = useDispatch();\n  let JWT = useSelector(selectJWT);\n  const connected = useSelector(selectUserLogin);\n\n  // Utilisez useEffect pour effectuer une action lorsque le composant est monté ou lorsque JWT change.\n  useEffect(() => {\n    async function getUserProfile() {\n      try {\n        // Faites une requête pour récupérer les données du profil de l'utilisateur avec JWT.\n        const response = await new ApiCalls().getUserProfileData(JWT);\n\n        // Mettez à jour les données de l'utilisateur dans le store Redux.\n        dispatch(setUserData(response.data.body));\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du profil de l'utilisateur : \", error);\n        // Vous pouvez gérer les erreurs ici, par exemple, afficher un message à l'utilisateur.\n      }\n    }\n\n    getUserProfile();\n  }, [JWT, dispatch]);\n\n  // Si l'utilisateur n'est pas connecté, redirigez-le vers la page de connexion.\n  if (connected === false || connected === undefined || connected === null) {\n    return /*#__PURE__*/_jsxDEV(\"iteneraire\", {\n      to: \"/sign-in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main bg-dark\",\n    children: [/*#__PURE__*/_jsxDEV(UserProfile, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"sr-only\",\n      children: \"Accounts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), transactionData.map(_ref => {\n      let {\n        id,\n        title,\n        amount,\n        description\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(TransactionCard, {\n        title: title,\n        amount: amount,\n        description: description\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPage, \"z00FehH06mXMTfxod+qnSiybdMg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = UserPage;\nexport default UserPage;\nvar _c;\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"names":["transactionData","TransactionCard","useEffect","selectJWT","selectUserLogin","setUserData","useDispatch","useSelector","ApiCalls","iteneraire","UserProfile","jsxDEV","_jsxDEV","UserPage","_s","dispatch","JWT","connected","getUserProfile","response","getUserProfileData","data","body","error","console","undefined","to","fileName","_jsxFileName","lineNumber","columnNumber","className","children","map","_ref","id","title","amount","description","_c","$RefreshReg$"],"sources":["/Users/johannacastagna/Documents/Projet_11/frontend/src/pages/user.jsx"],"sourcesContent":["import { transactionData } from \"../data/data\";\nimport TransactionCard from \"../components/transactionCard\";\nimport { useEffect } from \"react\";\nimport { selectJWT, selectUserLogin, setUserData } from '../store/store'; // Assurez-vous de définir le chemin correct vers votre fichier store.jsx\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiCalls from \"../services/Api\";\n\nimport { iteneraire } from \"react-router-dom\";\nimport UserProfile from \"../components/userProfile\";\n\nfunction UserPage() {\n  let dispatch = useDispatch();\n  let JWT = useSelector(selectJWT);\n  const connected = useSelector(selectUserLogin);\n\n  // Utilisez useEffect pour effectuer une action lorsque le composant est monté ou lorsque JWT change.\n  useEffect(() => {\n    async function getUserProfile() {\n      try {\n        // Faites une requête pour récupérer les données du profil de l'utilisateur avec JWT.\n        const response = await new ApiCalls().getUserProfileData(JWT);\n        \n        // Mettez à jour les données de l'utilisateur dans le store Redux.\n        dispatch(setUserData(response.data.body));\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du profil de l'utilisateur : \", error);\n        // Vous pouvez gérer les erreurs ici, par exemple, afficher un message à l'utilisateur.\n      }\n    }\n    getUserProfile();\n  }, [JWT, dispatch]);\n\n  // Si l'utilisateur n'est pas connecté, redirigez-le vers la page de connexion.\n  if (connected === false || connected === undefined || connected === null) {\n    return <iteneraire to=\"/sign-in\" />;\n  }\n\n  return (\n    <main className=\"main bg-dark\">\n      {/* Composant UserProfile pour afficher les informations de l'utilisateur */}\n      <UserProfile />\n      <h2 className=\"sr-only\">Accounts</h2>\n      {/* Mapping des transactions */}\n      {transactionData.map(({ id, title, amount, description }) => {\n        return (\n          <TransactionCard key={id} title={title} amount={amount} description={description} />\n        );\n      })}\n    </main>\n  );\n}\n\nexport default UserPage;\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,cAAc;AAC9C,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,SAAS,EAAEC,eAAe,EAAEC,WAAW,QAAQ,gBAAgB,CAAC,CAAC;AAC1E,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,IAAIC,QAAQ,GAAGT,WAAW,EAAE;EAC5B,IAAIU,GAAG,GAAGT,WAAW,CAACJ,SAAS,CAAC;EAChC,MAAMc,SAAS,GAAGV,WAAW,CAACH,eAAe,CAAC;;EAE9C;EACAF,SAAS,CAAC,MAAM;IACd,eAAegB,cAAcA,CAAA,EAAG;MAC9B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAM,IAAIX,QAAQ,EAAE,CAACY,kBAAkB,CAACJ,GAAG,CAAC;;QAE7D;QACAD,QAAQ,CAACV,WAAW,CAACc,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC;MAE3C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8DAA8D,EAAEA,KAAK,CAAC;QACpF;MACF;IACF;;IACAL,cAAc,EAAE;EAClB,CAAC,EAAE,CAACF,GAAG,EAAED,QAAQ,CAAC,CAAC;;EAEnB;EACA,IAAIE,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAKQ,SAAS,IAAIR,SAAS,KAAK,IAAI,EAAE;IACxE,oBAAOL,OAAA;MAAYc,EAAE,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EACrC;EAEA,oBACElB,OAAA;IAAMmB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAE5BpB,OAAA,CAACF,WAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACflB,OAAA;MAAImB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAQ;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAEpC9B,eAAe,CAACiC,GAAG,CAACC,IAAA,IAAwC;MAAA,IAAvC;QAAEC,EAAE;QAAEC,KAAK;QAAEC,MAAM;QAAEC;MAAY,CAAC,GAAAJ,IAAA;MACtD,oBACEtB,OAAA,CAACX,eAAe;QAAUmC,KAAK,EAAEA,KAAM;QAACC,MAAM,EAAEA,MAAO;QAACC,WAAW,EAAEA;MAAY,GAA3DH,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAA4D;IAExF,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEX;AAAChB,EAAA,CAzCQD,QAAQ;EAAA,QACAP,WAAW,EAChBC,WAAW,EACHA,WAAW;AAAA;AAAAgC,EAAA,GAHtB1B,QAAQ;AA2CjB,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}