{"ast":null,"code":"/* \nCe fichier gère l'état de l'authentification de l'utilisateur.\nUtilise createSlice et createAsyncThunk de Redux Toolkit pour gérer les actions asynchrones liées à l'authentification (connexion et déconnexion).\nIl définit un état initial qui contient des informations sur l'utilisateur actuellement authentifié, comme son statut de connexion, les données de l'utilisateur, l'état de chargement, et les erreurs.\nIl utilise des reducers pour mettre à jour l'état en réponse aux actions asynchrones, notamment loginAsync et logoutAsync.\n*/\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  user: null,\n  isLoggedIn: false,\n  isLoading: false,\n  error: null\n};\n\n// Créez un thunk asynchrone pour gérer la connexion de l'utilisateur\nexport const loginAsync = createAsyncThunk('auth/login', async credentials => {\n  // Vous pouvez implémenter la logique de connexion ici, par exemple, en faisant une requête API\n  const response = await yourLoginApiFunction(credentials);\n  return response.data; // Assurez-vous que votre API renvoie les données de l'utilisateur après la connexion\n});\n\n// Créez un thunk asynchrone pour gérer la déconnexion de l'utilisateur\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  // Implémentez la logique de déconnexion ici\n  // Par exemple, réinitialisez les données de l'utilisateur dans le state\n  return null;\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loginAsync.pending, state => {\n      state.isLoading = true;\n    }).addCase(loginAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isLoggedIn = true;\n      state.user = action.payload;\n    }).addCase(loginAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    }).addCase(logoutAsync.pending, state => {\n      state.isLoading = true;\n    }).addCase(logoutAsync.fulfilled, state => {\n      state.isLoading = false;\n      state.isLoggedIn = false;\n      state.user = null;\n    }).addCase(logoutAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","user","isLoggedIn","isLoading","error","loginAsync","credentials","response","yourLoginApiFunction","data","logoutAsync","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/Users/johannacastagna/Documents/Projet_11/frontend/src/store/authSlice.js"],"sourcesContent":["/* \nCe fichier gère l'état de l'authentification de l'utilisateur.\nUtilise createSlice et createAsyncThunk de Redux Toolkit pour gérer les actions asynchrones liées à l'authentification (connexion et déconnexion).\nIl définit un état initial qui contient des informations sur l'utilisateur actuellement authentifié, comme son statut de connexion, les données de l'utilisateur, l'état de chargement, et les erreurs.\nIl utilise des reducers pour mettre à jour l'état en réponse aux actions asynchrones, notamment loginAsync et logoutAsync.\n*/\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  user: null,\n  isLoggedIn: false,\n  isLoading: false,\n  error: null\n};\n\n// Créez un thunk asynchrone pour gérer la connexion de l'utilisateur\nexport const loginAsync = createAsyncThunk('auth/login', async (credentials) => {\n  // Vous pouvez implémenter la logique de connexion ici, par exemple, en faisant une requête API\n  const response = await yourLoginApiFunction(credentials);\n  return response.data; // Assurez-vous que votre API renvoie les données de l'utilisateur après la connexion\n});\n\n// Créez un thunk asynchrone pour gérer la déconnexion de l'utilisateur\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  // Implémentez la logique de déconnexion ici\n  // Par exemple, réinitialisez les données de l'utilisateur dans le state\n  return null;\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(loginAsync.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isLoggedIn = true;\n        state.user = action.payload;\n      })\n      .addCase(loginAsync.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message;\n      })\n      .addCase(logoutAsync.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(logoutAsync.fulfilled, (state) => {\n        state.isLoading = false;\n        state.isLoggedIn = false;\n        state.user = null;\n      })\n      .addCase(logoutAsync.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,YAAY,EAAE,MAAOO,WAAW,IAAK;EAC9E;EACA,MAAMC,QAAQ,GAAG,MAAMC,oBAAoB,CAACF,WAAW,CAAC;EACxD,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAGX,gBAAgB,CAAC,aAAa,EAAE,YAAY;EACrE;EACA;EACA,OAAO,IAAI;AACb,CAAC,CAAC;AAEF,MAAMY,SAAS,GAAGb,WAAW,CAAC;EAC5Bc,IAAI,EAAE,MAAM;EACZZ,YAAY;EACZa,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,UAAU,CAACY,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACf,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDa,OAAO,CAACX,UAAU,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAAChB,UAAU,GAAG,IAAI;MACvBgB,KAAK,CAACjB,IAAI,GAAGmB,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAACX,UAAU,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAAChB,KAAK,CAACmB,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACN,WAAW,CAACO,OAAO,EAAGC,KAAK,IAAK;MACvCA,KAAK,CAACf,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDa,OAAO,CAACN,WAAW,CAACS,SAAS,EAAGD,KAAK,IAAK;MACzCA,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAAChB,UAAU,GAAG,KAAK;MACxBgB,KAAK,CAACjB,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC,CACDe,OAAO,CAACN,WAAW,CAACY,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAAChB,KAAK,CAACmB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeZ,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}