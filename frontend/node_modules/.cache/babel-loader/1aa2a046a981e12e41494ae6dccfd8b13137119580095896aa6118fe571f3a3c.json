{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fonction utilitaire pour effectuer une requête HTTP\nasync function fetchUserData(_ref) {\n  let {\n    email,\n    password\n  } = _ref;\n  const response = await fetch('http://localhost:3001/api/v1/user/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (response.status === 200) {\n    const data = await response.json();\n    return data.body;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\nexport const loginUser = createAsyncThunk('users/login', async (_ref2, thunkAPI) => {\n  let {\n    email,\n    password,\n    remember\n  } = _ref2;\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const userData = await fetchUserData({\n      email,\n      password\n    });\n\n    // Stockage du token d'authentification dans le stockage local\n    localStorage.setItem('token', userData.token);\n\n    // Gestion de la mémorisation de l'email et du mot de passe\n    if (remember) {\n      localStorage.setItem('email', email);\n      localStorage.setItem('psw', password);\n    } else {\n      localStorage.removeItem('email');\n      localStorage.removeItem('psw');\n    }\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Fonction utilitaire pour effectuer une requête HTTP avec le jeton d'authentification\nasync function makeAuthenticatedApiRequest(url, method, token) {\n  let body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const headers = {\n    Accept: 'application/json',\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n  const options = {\n    method,\n    headers,\n    body: body ? JSON.stringify(body) : null\n  };\n  const response = await fetch(url, options);\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\nexport const fetchUserBytoken = createAsyncThunk('users/fetchUserByToken', async (_ref3, thunkAPI) => {\n  let {\n    token\n  } = _ref3;\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const userData = await makeAuthenticatedApiRequest(profileUrl, 'POST', token);\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const updateUserBytoken = createAsyncThunk('users/updateUserByToken', async (_ref4, thunkAPI) => {\n  let {\n    userName\n  } = _ref4;\n  try {\n    // Récupération du jeton d'authentification du stockage local\n    const token = localStorage.getItem('token');\n\n    // Appel de la fonction utilitaire pour mettre à jour les informations utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const updatedUserData = await makeAuthenticatedApiRequest(profileUrl, 'PUT', token, {\n      userName\n    });\n\n    // Retour des données utilisateur mises à jour\n    return updatedUserData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Crée une action asynchrone (thunk) pour récupérer des données de compte\nexport const fetchAccount = createAsyncThunk('users/fetchAccount',\n// Nom de l'action\nasync thunkAPI => {\n  try {\n    // Effectue une requête pour obtenir des données depuis un fichier JSON (simulation)\n    const response = await fetch('/Data.json'); // Remplacez '/Data.json' par votre URL réelle\n    const data = await response.json();\n\n    // Vérifie le statut de la réponse HTTP\n    if (response.status === 200) {\n      // Si le statut est OK (200), retourne les données récupérées\n      return data;\n    } else {\n      // Si le statut n'est pas OK, cela signifie une erreur\n      // Rejette la promesse avec les données reçues, indiquant une erreur\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    // En cas d'erreur lors de la requête\n    console.error('Error', e.response.data); // Affiche l'erreur dans la console (simulée)\n    // Rejette la promesse avec les données de l'erreur, indiquant une erreur\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\n\n// Crée une tranche (slice) pour gérer l'état de l'utilisateur\nexport const userSlice = createSlice({\n  name: 'user',\n  // Nom de la tranche\n  initialState: {\n    userName: '',\n    email: '',\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: ''\n  },\n  reducers: {\n    clearState: state => {\n      // Réduit l'état en réinitialisant les indicateurs\n      state.isError = false;\n      state.isSuccess = false;\n      state.isFetching = false;\n      return state;\n    }\n  },\n  extraReducers: {\n    // Réducteurs supplémentaires gérant les actions asynchrones\n\n    // Réducteur en cas de réussite de l'action loginUser\n    [loginUser.fulfilled]: state => {\n      // Réduit l'état en marquant la fin de la requête et le succès\n      state.isFetching = false;\n      state.isSuccess = true;\n      return state;\n    },\n    // Réducteur en cas d'échec de l'action loginUser\n    [loginUser.rejected]: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      console.log('payload', payload);\n      // Réduit l'état en marquant la fin de la requête, une erreur, et enregistrant le message d'erreur\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    },\n    // Réducteur en cours d'exécution de l'action loginUser\n    [loginUser.pending]: state => {\n      // Réduit l'état en indiquant que la requête est en cours\n      state.isFetching = true;\n    },\n    // ... Ajoutez d'autres réducteurs pour d'autres actions asynchrones ici ...\n\n    // Réducteur en cas de réussite de l'action fetchAccount\n    [fetchAccount.fulfilled]: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      // Réduit l'état en marquant la fin de la requête, le succès, et enregistre les données de compte\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.account = payload;\n    },\n    // Réducteur en cas d'échec de l'action fetchAccount\n    [fetchAccount.rejected]: state => {\n      console.log('fetchAccount');\n      // Réduit l'état en marquant la fin de la requête et une erreur\n      state.isFetching = false;\n      state.isError = true;\n    }\n  }\n});\n\n// Exporte l'action clearState\nexport const {\n  clearState\n} = userSlice.actions;\n\n// Sélecteur pour accéder à l'état de l'utilisateur dans le store Redux\nexport const userSelector = state => state.user;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchUserData","_ref","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","status","data","json","errorData","Error","message","loginUser","_ref2","thunkAPI","remember","userData","localStorage","setItem","token","removeItem","error","console","rejectWithValue","makeAuthenticatedApiRequest","url","arguments","length","undefined","Authorization","options","fetchUserBytoken","_ref3","profileUrl","updateUserBytoken","_ref4","userName","getItem","updatedUserData","fetchAccount","e","userSlice","name","initialState","isFetching","isSuccess","isError","errorMessage","reducers","clearState","state","extraReducers","fulfilled","rejected","_ref5","payload","log","pending","_ref6","account","actions","userSelector","user"],"sources":["/Users/johannacastagna/Documents/projet11Enieme/frontend/src/features/UserSlices.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fonction utilitaire pour effectuer une requête HTTP\nasync function fetchUserData({ email, password }) {\n  const response = await fetch('http://localhost:3001/api/v1/user/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  });\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data.body;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\n\nexport const loginUser = createAsyncThunk('users/login', async ({ email, password, remember }, thunkAPI) => {\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const userData = await fetchUserData({ email, password });\n\n    // Stockage du token d'authentification dans le stockage local\n    localStorage.setItem('token', userData.token);\n\n    // Gestion de la mémorisation de l'email et du mot de passe\n    if (remember) {\n      localStorage.setItem('email', email);\n      localStorage.setItem('psw', password);\n    } else {\n      localStorage.removeItem('email');\n      localStorage.removeItem('psw');\n    }\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n\n\n// Fonction utilitaire pour effectuer une requête HTTP avec le jeton d'authentification\nasync function makeAuthenticatedApiRequest(url, method, token, body = null) {\n  const headers = {\n    Accept: 'application/json',\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/json',\n  };\n\n  const options = {\n    method,\n    headers,\n    body: body ? JSON.stringify(body) : null,\n  };\n\n  const response = await fetch(url, options);\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\n\nexport const fetchUserBytoken = createAsyncThunk('users/fetchUserByToken', async ({ token }, thunkAPI) => {\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const userData = await makeAuthenticatedApiRequest(profileUrl, 'POST', token);\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\nexport const updateUserBytoken = createAsyncThunk('users/updateUserByToken', async ({ userName }, thunkAPI) => {\n  try {\n    // Récupération du jeton d'authentification du stockage local\n    const token = localStorage.getItem('token');\n\n    // Appel de la fonction utilitaire pour mettre à jour les informations utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const updatedUserData = await makeAuthenticatedApiRequest(profileUrl, 'PUT', token, {\n      userName,\n    });\n\n    // Retour des données utilisateur mises à jour\n    return updatedUserData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n\n\n\n// Crée une action asynchrone (thunk) pour récupérer des données de compte\nexport const fetchAccount = createAsyncThunk(\n  'users/fetchAccount', // Nom de l'action\n  async (thunkAPI) => {\n    try {\n      // Effectue une requête pour obtenir des données depuis un fichier JSON (simulation)\n      const response = await fetch('/Data.json'); // Remplacez '/Data.json' par votre URL réelle\n      const data = await response.json();\n\n      // Vérifie le statut de la réponse HTTP\n      if (response.status === 200) {\n        // Si le statut est OK (200), retourne les données récupérées\n        return data;\n      } else {\n        // Si le statut n'est pas OK, cela signifie une erreur\n        // Rejette la promesse avec les données reçues, indiquant une erreur\n        return thunkAPI.rejectWithValue(data);\n      }\n    } catch (e) {\n      // En cas d'erreur lors de la requête\n      console.error('Error', e.response.data); // Affiche l'erreur dans la console (simulée)\n      // Rejette la promesse avec les données de l'erreur, indiquant une erreur\n      return thunkAPI.rejectWithValue(e.response.data);\n    }\n  }\n);\n\n// Crée une tranche (slice) pour gérer l'état de l'utilisateur\nexport const userSlice = createSlice({\n  name: 'user', // Nom de la tranche\n  initialState: {\n    userName: '',\n    email: '',\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: '',\n  },\n  reducers: {\n    clearState: (state) => {\n      // Réduit l'état en réinitialisant les indicateurs\n      state.isError = false;\n      state.isSuccess = false;\n      state.isFetching = false;\n\n      return state;\n    },\n  },\n  extraReducers: {\n    // Réducteurs supplémentaires gérant les actions asynchrones\n\n    // Réducteur en cas de réussite de l'action loginUser\n    [loginUser.fulfilled]: (state) => {\n      // Réduit l'état en marquant la fin de la requête et le succès\n      state.isFetching = false;\n      state.isSuccess = true;\n      return state;\n    },\n    // Réducteur en cas d'échec de l'action loginUser\n    [loginUser.rejected]: (state, { payload }) => {\n      console.log('payload', payload);\n      // Réduit l'état en marquant la fin de la requête, une erreur, et enregistrant le message d'erreur\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    },\n    // Réducteur en cours d'exécution de l'action loginUser\n    [loginUser.pending]: (state) => {\n      // Réduit l'état en indiquant que la requête est en cours\n      state.isFetching = true;\n    },\n\n    // ... Ajoutez d'autres réducteurs pour d'autres actions asynchrones ici ...\n\n    // Réducteur en cas de réussite de l'action fetchAccount\n    [fetchAccount.fulfilled]: (state, { payload }) => {\n      // Réduit l'état en marquant la fin de la requête, le succès, et enregistre les données de compte\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.account = payload;\n    },\n    // Réducteur en cas d'échec de l'action fetchAccount\n    [fetchAccount.rejected]: (state) => {\n      console.log('fetchAccount');\n      // Réduit l'état en marquant la fin de la requête et une erreur\n      state.isFetching = false;\n      state.isError = true;\n    },\n  },\n});\n\n// Exporte l'action clearState\nexport const { clearState } = userSlice.actions;\n\n// Sélecteur pour accéder à l'état de l'utilisateur dans le store Redux\nexport const userSelector = (state) => state.user;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}