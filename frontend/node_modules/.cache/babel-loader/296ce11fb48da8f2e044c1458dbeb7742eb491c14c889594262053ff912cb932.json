{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// --------------- STATE INITIALIZATION ---------------\n\nconst initialState = {\n  auth: {\n    id: '',\n    email: '',\n    firstName: '',\n    lastName: '',\n    token: ''\n  },\n  isLoggedIn: false,\n  hasLoginFailed: false,\n  isNameEdited: false\n};\n\n// --------------- ACTIONS ---------------\n\nexport function loginAction(navigate) {\n  return dispatch => {\n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n    const body = JSON.stringify({\n      'email': email,\n      'password': password\n    });\n\n    // Post on /user/login to get the token\n    fetch('http://localhost:3001/api/v1/user/login', {\n      body: body,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\"\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(response => {\n      const token = response.body.token;\n      // Post on /user/profile to get user data with the found token\n      fetch(\"http://localhost:3001/api/v1/user/profile\", {\n        headers: {\n          'Authorization': 'Bearer' + response.body.token,\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\"\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(response => {\n        dispatch(loginSuccessAction(response.body, token));\n        navigate(\"/profile\");\n      }).catch(function (error) {\n        dispatch(loginFailureAction(error));\n      });\n    }).catch(function (error) {\n      dispatch(loginFailureAction(error));\n    });\n  };\n}\nexport function loginSuccessAction(body, token) {\n  localStorage.setItem('id', body.id);\n  localStorage.setItem('email', body.email);\n  localStorage.setItem('firstName', body.firstName);\n  localStorage.setItem('lastName', body.lastName);\n  localStorage.setItem('token', token);\n  return {\n    type: \"LOGIN_SUCCESS_ACTION\",\n    payload: {\n      body,\n      token\n    }\n  };\n}\nexport function loginFailureAction(error) {\n  console.log(\"Error at fetch:\", error.message);\n  return {\n    type: \"LOGIN_FAILURE_ACTION\"\n  };\n}\nexport function logoutAction() {\n  localStorage.clear();\n  return {\n    type: \"LOGOUT_ACTION\"\n  };\n}\nexport function editNamesAction() {\n  return {\n    type: \"EDIT_NAMES_ACTION\"\n  };\n}\nexport function changeNamesAction() {\n  return dispatch => {\n    const firstName = document.getElementById('firstname').value;\n    const lastName = document.getElementById('lastname').value;\n    const body = JSON.stringify({\n      'firstName': firstName,\n      'lastName': lastName\n    });\n    const token = localStorage.getItem('token');\n\n    // Put on /user/profile to update the user names\n    fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      body: body,\n      headers: {\n        'Authorization': 'Bearer' + token,\n        'Content-Type': 'application/json'\n      },\n      method: \"PUT\"\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => {\n      dispatch({\n        type: \"CHANGE_NAMES_ACTION\",\n        payload: {\n          firstName,\n          lastName\n        }\n      });\n      localStorage.setItem('firstName', firstName);\n      localStorage.setItem('lastName', lastName);\n    }).catch(function (error) {\n      console.log(\"Error at fetch:\" + error.message);\n    });\n  };\n}\n\n// --------------- REDUCER ---------------\n\n/**\n * Reducer function (Redux)\n * @param { Array } state - Global state\n * @param { Object } action - Action\n * @returns { Array } Updated global state\n */\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS_ACTION\":\n      {\n        return {\n          ...state,\n          auth: {\n            ...state.auth,\n            id: action.payload.body.id,\n            email: action.payload.body.email,\n            firstName: action.payload.body.firstName,\n            lastName: action.payload.body.lastName,\n            token: action.payload.token\n          },\n          isLoggedIn: true,\n          hasLoginFailed: false\n        };\n      }\n    case \"LOGIN_FAILURE_ACTION\":\n      {\n        return {\n          ...state,\n          hasLoginFailed: true\n        };\n      }\n    case \"LOGOUT_ACTION\":\n      {\n        return initialState;\n      }\n    case \"EDIT_NAMES_ACTION\":\n      {\n        return {\n          ...state,\n          isNameEdited: !state.isNameEdited\n        };\n      }\n    case \"CHANGE_NAMES_ACTION\":\n      {\n        return {\n          ...state,\n          auth: {\n            ...state.auth,\n            firstName: action.payload.firstName,\n            lastName: action.payload.lastName\n          }\n        };\n      }\n    default:\n      return state;\n  }\n}\n\n// To stay logged in when page refresh\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const persistor = persistStore(store);","map":{"version":3,"names":["configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","initialState","auth","id","email","firstName","lastName","token","isLoggedIn","hasLoginFailed","isNameEdited","loginAction","navigate","dispatch","document","getElementById","value","password","body","JSON","stringify","fetch","headers","method","then","response","ok","json","loginSuccessAction","catch","error","loginFailureAction","localStorage","setItem","type","payload","console","log","message","logoutAction","clear","editNamesAction","changeNamesAction","getItem","data","reducer","state","action","persistConfig","key","persistedReducer","store","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["/Users/johannacastagna/Documents/Projet_11/frontend/src/scripts/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER, } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\n\n// --------------- STATE INITIALIZATION ---------------\n\nconst initialState = {\n   auth: {\n      id: '',\n      email: '',\n      firstName: '',\n      lastName: '',\n      token: ''\n   },\n   isLoggedIn: false,\n   hasLoginFailed: false,\n   isNameEdited: false\n};\n\n\n// --------------- ACTIONS ---------------\n\nexport function loginAction(navigate) {\n   return (dispatch) => {\n      const email = document.getElementById('email').value;\n      const password = document.getElementById('password').value;\n      const body = JSON.stringify({ 'email': email, 'password': password });\n\n      // Post on /user/login to get the token\n      fetch('http://localhost:3001/api/v1/user/login', {\n         body: body,\n         headers : { 'Content-Type': 'application/json' },\n         method: \"POST\"\n      })\n      .then(response => {\n         if (response.ok) {\n            return response.json();\n         }\n      })\n      .then(response => {\n         const token = response.body.token;\n         // Post on /user/profile to get user data with the found token\n         fetch(\"http://localhost:3001/api/v1/user/profile\", {\n            headers: {\n               'Authorization': 'Bearer' + response.body.token,\n               'Content-Type': 'application/json'\n            },\n            method: \"POST\"\n         })\n         .then(response => {\n            if (response.ok) {\n               return response.json();\n            }\n         })\n         .then(response => {\n            dispatch(loginSuccessAction(response.body, token));\n            navigate(\"/profile\");\n         })\n         .catch(function(error) {\n            dispatch(loginFailureAction(error));\n         })\n      })\n      .catch(function(error) {\n         dispatch(loginFailureAction(error));\n      })\n   }\n}\n\nexport function loginSuccessAction(body, token) {\n   localStorage.setItem('id', body.id);\n   localStorage.setItem('email', body.email);\n   localStorage.setItem('firstName', body.firstName);\n   localStorage.setItem('lastName', body.lastName);\n   localStorage.setItem('token', token);\n   return {\n      type: \"LOGIN_SUCCESS_ACTION\",\n      payload: { body, token }\n   }\n}\n\nexport function loginFailureAction(error) {\n   console.log(\"Error at fetch:\", error.message);\n   return {\n      type: \"LOGIN_FAILURE_ACTION\"\n   }\n}\n\nexport function logoutAction() {\n   localStorage.clear();\n   return {\n      type: \"LOGOUT_ACTION\"\n   }\n}\n\nexport function editNamesAction() {\n   return {\n      type: \"EDIT_NAMES_ACTION\"\n   }\n}\n\nexport function changeNamesAction() {\n   return (dispatch) => {\n\n      const firstName = document.getElementById('firstname').value;\n      const lastName = document.getElementById('lastname').value;\n      const body = JSON.stringify({ 'firstName': firstName, 'lastName': lastName });\n      const token = localStorage.getItem('token');\n\n      // Put on /user/profile to update the user names\n      fetch(\"http://localhost:3001/api/v1/user/profile\", {\n         body: body,\n         headers: {\n            'Authorization': 'Bearer' + token,\n            'Content-Type': 'application/json'\n         },\n         method: \"PUT\"\n      })\n      .then(response => {\n         if (response.ok) {\n            return response.json();\n         }\n      })\n      .then(data => {\n         dispatch({\n            type: \"CHANGE_NAMES_ACTION\",\n            payload: { firstName, lastName }\n         })\n         localStorage.setItem('firstName', firstName);\n         localStorage.setItem('lastName', lastName);\n      })\n      .catch(function(error) {\n         console.log(\"Error at fetch:\" + error.message);\n      })\n   }\n}\n\n\n// --------------- REDUCER ---------------\n\n/**\n * Reducer function (Redux)\n * @param { Array } state - Global state\n * @param { Object } action - Action\n * @returns { Array } Updated global state\n */\nfunction reducer(state = initialState, action) {\n   switch (action.type) {\n      case \"LOGIN_SUCCESS_ACTION\": {\n         return {\n            ...state,\n            auth: {\n               ...state.auth,\n               id: action.payload.body.id,\n               email: action.payload.body.email,\n               firstName: action.payload.body.firstName,\n               lastName: action.payload.body.lastName,\n               token: action.payload.token,\n            },\n            isLoggedIn: true,\n            hasLoginFailed: false\n         }\n      }\n      case \"LOGIN_FAILURE_ACTION\": {\n         return {\n            ...state,\n            hasLoginFailed: true\n         }\n      }\n      case \"LOGOUT_ACTION\": {\n         return initialState\n      }\n      case \"EDIT_NAMES_ACTION\": {\n         return {\n            ...state,\n            isNameEdited: !state.isNameEdited\n         }\n      }\n      case \"CHANGE_NAMES_ACTION\": {\n         return {\n            ...state,\n            auth: {\n               ...state.auth,\n               firstName: action.payload.firstName,\n               lastName: action.payload.lastName\n            }\n         }\n      }\n      default:\n         return state\n   }\n}\n\n// To stay logged in when page refresh\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nexport const store = configureStore({\n   reducer: persistedReducer, \n   middleware: (getDefaultMiddleware) =>\n   getDefaultMiddleware({\n      serializableCheck: {\n         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n   }),\n})\n\nexport const persistor = persistStore(store)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}