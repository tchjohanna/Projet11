{"ast":null,"code":"import axios from \"axios\";\n\nclass ApiCalls {\n  async userLogIn(email, password, rememberMe) {\n    try {\n      const response = await axios.post('http://localhost:3001/api/v1/user/login', {\n        email: email,\n        password: password\n      });\n\n      if (response.data.body.token) {\n        if (rememberMe) {\n          sessionStorage.setItem(\"JWT\", response.data.body.token);\n        }\n\n        console.log(\"Mon token de connexion est: \" + response.data.body.token);\n        return response;\n      }\n    } catch (error) {\n      return error.response ? error.response.data : error;\n    }\n  } // Fonction pour récupérer les données du profil de l'utilisateur\n\n\n  async getUserProfileData(JWT) {\n    try {\n      const response = await axios.post(\"http://localhost:3001/api/v1/user/profile\", {}, {\n        headers: {\n          Authorization: \"Bearer \" + JWT\n        }\n      });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  } // Fonction pour mettre à jour les données du profil de l'utilisateur\n\n\n  async updateUserProfileData(firstName, lastName, JWT) {\n    try {\n      const response = await axios.put(\"http://localhost:3001/api/v1/user/profile\", {\n        firstName,\n        lastName\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + JWT\n        }\n      });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async getEditUserData(JWT) {\n    try {\n      // Supposons que votre API a un endpoint 'user/edit' pour obtenir les données d'édition\n      const response = await axios.get(\"http://localhost:3001/api/v1/user/edit\", {\n        headers: {\n          Authorization: \"Bearer \" + JWT\n        }\n      });\n      return response;\n    } catch (error) {\n      // Vous pouvez choisir de retourner l'erreur ou de la gérer différemment\n      return error.response ? error.response.data : error;\n    }\n  }\n\n}\n\nexport default ApiCalls;","map":{"version":3,"names":["axios","ApiCalls","userLogIn","email","password","rememberMe","response","post","data","body","token","sessionStorage","setItem","console","log","error","getUserProfileData","JWT","headers","Authorization","updateUserProfileData","firstName","lastName","put","getEditUserData","get"],"sources":["/Users/johannacastagna/Documents/Projet11/frontend/src/services/Api.jsx"],"sourcesContent":["import axios from \"axios\";\n\n\n  class ApiCalls {\n   async userLogIn(email, password, rememberMe) {\n    try {\n      const response = await axios.post(\n        'http://localhost:3001/api/v1/user/login',\n        {\n          email: email,\n          password: password\n        }\n      );\n\n      if (response.data.body.token) {\n        if (rememberMe) {\n          sessionStorage.setItem(\"JWT\", response.data.body.token);\n        }\n        console.log(\"Mon token de connexion est: \" + response.data.body.token);\n        return response;\n      }\n    } catch (error) {\n      return error.response ? error.response.data : error;\n    }\n  }\n\n  // Fonction pour récupérer les données du profil de l'utilisateur\n  async getUserProfileData(JWT) {\n    try {\n      const response = await axios.post(\n        \"http://localhost:3001/api/v1/user/profile\",\n        {},\n        {\n          headers: {\n            Authorization: \"Bearer \" + JWT\n          }\n        }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  // Fonction pour mettre à jour les données du profil de l'utilisateur\n  async updateUserProfileData(firstName, lastName, JWT) {\n    try {\n      const response = await axios.put(\n        \"http://localhost:3001/api/v1/user/profile\",\n        {\n          firstName,\n          lastName\n        },\n        {\n          headers: {\n            Authorization: \"Bearer \" + JWT\n          }\n        }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n    \n  }\n  async getEditUserData(JWT) {\n    try {\n      // Supposons que votre API a un endpoint 'user/edit' pour obtenir les données d'édition\n      const response = await axios.get(\n        \"http://localhost:3001/api/v1/user/edit\",\n        {\n          headers: {\n            Authorization: \"Bearer \" + JWT\n          }\n        }\n      );\n      return response;\n    } catch (error) {\n      // Vous pouvez choisir de retourner l'erreur ou de la gérer différemment\n      return error.response ? error.response.data : error;\n    }\n  }\n}\n\n\nexport default ApiCalls;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGE,MAAMC,QAAN,CAAe;EACC,MAATC,SAAS,CAACC,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,EAA8B;IAC5C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CACrB,yCADqB,EAErB;QACEJ,KAAK,EAAEA,KADT;QAEEC,QAAQ,EAAEA;MAFZ,CAFqB,CAAvB;;MAQA,IAAIE,QAAQ,CAACE,IAAT,CAAcC,IAAd,CAAmBC,KAAvB,EAA8B;QAC5B,IAAIL,UAAJ,EAAgB;UACdM,cAAc,CAACC,OAAf,CAAuB,KAAvB,EAA8BN,QAAQ,CAACE,IAAT,CAAcC,IAAd,CAAmBC,KAAjD;QACD;;QACDG,OAAO,CAACC,GAAR,CAAY,iCAAiCR,QAAQ,CAACE,IAAT,CAAcC,IAAd,CAAmBC,KAAhE;QACA,OAAOJ,QAAP;MACD;IACF,CAhBD,CAgBE,OAAOS,KAAP,EAAc;MACd,OAAOA,KAAK,CAACT,QAAN,GAAiBS,KAAK,CAACT,QAAN,CAAeE,IAAhC,GAAuCO,KAA9C;IACD;EACF,CArBc,CAuBf;;;EACwB,MAAlBC,kBAAkB,CAACC,GAAD,EAAM;IAC5B,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CACrB,2CADqB,EAErB,EAFqB,EAGrB;QACEW,OAAO,EAAE;UACPC,aAAa,EAAE,YAAYF;QADpB;MADX,CAHqB,CAAvB;MASA,OAAOX,QAAP;IACD,CAXD,CAWE,OAAOS,KAAP,EAAc;MACd,OAAOA,KAAP;IACD;EACF,CAvCc,CAyCf;;;EAC2B,MAArBK,qBAAqB,CAACC,SAAD,EAAYC,QAAZ,EAAsBL,GAAtB,EAA2B;IACpD,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMN,KAAK,CAACuB,GAAN,CACrB,2CADqB,EAErB;QACEF,SADF;QAEEC;MAFF,CAFqB,EAMrB;QACEJ,OAAO,EAAE;UACPC,aAAa,EAAE,YAAYF;QADpB;MADX,CANqB,CAAvB;MAYA,OAAOX,QAAP;IACD,CAdD,CAcE,OAAOS,KAAP,EAAc;MACd,OAAOA,KAAP;IACD;EAEF;;EACoB,MAAfS,eAAe,CAACP,GAAD,EAAM;IACzB,IAAI;MACF;MACA,MAAMX,QAAQ,GAAG,MAAMN,KAAK,CAACyB,GAAN,CACrB,wCADqB,EAErB;QACEP,OAAO,EAAE;UACPC,aAAa,EAAE,YAAYF;QADpB;MADX,CAFqB,CAAvB;MAQA,OAAOX,QAAP;IACD,CAXD,CAWE,OAAOS,KAAP,EAAc;MACd;MACA,OAAOA,KAAK,CAACT,QAAN,GAAiBS,KAAK,CAACT,QAAN,CAAeE,IAAhC,GAAuCO,KAA9C;IACD;EACF;;AA9Ec;;AAkFjB,eAAed,QAAf"},"metadata":{},"sourceType":"module"}