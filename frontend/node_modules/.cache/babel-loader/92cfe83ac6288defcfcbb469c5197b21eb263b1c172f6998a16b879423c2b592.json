{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fonction utilitaire pour effectuer une requête HTTP\nasync function fetchUserData(_ref) {\n  let {\n    email,\n    password\n  } = _ref;\n  const response = await fetch('http://localhost:3001/api/v1/user/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (response.status === 200) {\n    const data = await response.json();\n    return data.body;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\nexport const loginUser = createAsyncThunk('users/login', async (_ref2, thunkAPI) => {\n  let {\n    email,\n    password,\n    remember\n  } = _ref2;\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const userData = await fetchUserData({\n      email,\n      password\n    });\n\n    // Stockage du token d'authentification dans le stockage local\n    localStorage.setItem('token', userData.token);\n\n    // Gestion de la mémorisation de l'email et du mot de passe\n    if (remember) {\n      localStorage.setItem('email', email);\n      localStorage.setItem('psw', password);\n    } else {\n      localStorage.removeItem('email');\n      localStorage.removeItem('psw');\n    }\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Fonction utilitaire pour effectuer une requête HTTP avec le jeton d'authentification\nasync function makeAuthenticatedApiRequest(url, method, token) {\n  let body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const headers = {\n    Accept: 'application/json',\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n  const options = {\n    method,\n    headers,\n    body: body ? JSON.stringify(body) : null\n  };\n  const response = await fetch(url, options);\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\nexport const fetchUserBytoken = createAsyncThunk('users/fetchUserByToken', async (_ref3, thunkAPI) => {\n  let {\n    token\n  } = _ref3;\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const userData = await makeAuthenticatedApiRequest(profileUrl, 'POST', token);\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const updateUserBytoken = createAsyncThunk('users/updateUserByToken', async (_ref4, thunkAPI) => {\n  let {\n    userName\n  } = _ref4;\n  try {\n    // Récupération du jeton d'authentification du stockage local\n    const token = localStorage.getItem('token');\n\n    // Appel de la fonction utilitaire pour mettre à jour les informations utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const updatedUserData = await makeAuthenticatedApiRequest(profileUrl, 'PUT', token, {\n      userName\n    });\n\n    // Retour des données utilisateur mises à jour\n    return updatedUserData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Fonction utilitaire pour effectuer une requête HTTP\nasync function makeApiRequest(url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  try {\n    const options = {\n      method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: body ? JSON.stringify(body) : null\n    };\n    const response = await fetch(url, options);\n    const data = await response.json();\n    if (response.status === 200) {\n      return data;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    console.error('Erreur lors de la requête à l\\'API', error.message);\n    throw error;\n  }\n}\nexport const fetchAccount = createAsyncThunk('users/fetchAccount', async (_, thunkAPI) => {\n  try {\n    // URL de l'API pour récupérer les données du compte\n    const accountUrl = 'http://localhost:3001/api/v1/account';\n\n    // Utilisation de la fonction utilitaire pour effectuer la requête\n    const accountData = await makeApiRequest(accountUrl);\n\n    // Retour des données du compte\n    return accountData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Erreur lors de la récupération des données du compte', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Le reste de votre code Redux Toolkit...","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchUserData","_ref","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","status","data","json","errorData","Error","message","loginUser","_ref2","thunkAPI","remember","userData","localStorage","setItem","token","removeItem","error","console","rejectWithValue","makeAuthenticatedApiRequest","url","arguments","length","undefined","Authorization","options","fetchUserBytoken","_ref3","profileUrl","updateUserBytoken","_ref4","userName","getItem","updatedUserData","makeApiRequest","fetchAccount","_","accountUrl","accountData"],"sources":["/Users/johannacastagna/Documents/projet11Enieme/frontend/src/features/UserSlices.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fonction utilitaire pour effectuer une requête HTTP\nasync function fetchUserData({ email, password }) {\n  const response = await fetch('http://localhost:3001/api/v1/user/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  });\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data.body;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\n\nexport const loginUser = createAsyncThunk('users/login', async ({ email, password, remember }, thunkAPI) => {\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const userData = await fetchUserData({ email, password });\n\n    // Stockage du token d'authentification dans le stockage local\n    localStorage.setItem('token', userData.token);\n\n    // Gestion de la mémorisation de l'email et du mot de passe\n    if (remember) {\n      localStorage.setItem('email', email);\n      localStorage.setItem('psw', password);\n    } else {\n      localStorage.removeItem('email');\n      localStorage.removeItem('psw');\n    }\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n\n\n// Fonction utilitaire pour effectuer une requête HTTP avec le jeton d'authentification\nasync function makeAuthenticatedApiRequest(url, method, token, body = null) {\n  const headers = {\n    Accept: 'application/json',\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/json',\n  };\n\n  const options = {\n    method,\n    headers,\n    body: body ? JSON.stringify(body) : null,\n  };\n\n  const response = await fetch(url, options);\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.message);\n  }\n}\n\nexport const fetchUserBytoken = createAsyncThunk('users/fetchUserByToken', async ({ token }, thunkAPI) => {\n  try {\n    // Appel de la fonction utilitaire pour obtenir les données utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const userData = await makeAuthenticatedApiRequest(profileUrl, 'POST', token);\n\n    // Retour des données utilisateur\n    return userData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\nexport const updateUserBytoken = createAsyncThunk('users/updateUserByToken', async ({ userName }, thunkAPI) => {\n  try {\n    // Récupération du jeton d'authentification du stockage local\n    const token = localStorage.getItem('token');\n\n    // Appel de la fonction utilitaire pour mettre à jour les informations utilisateur\n    const profileUrl = 'http://localhost:3001/api/v1/user/profile';\n    const updatedUserData = await makeAuthenticatedApiRequest(profileUrl, 'PUT', token, {\n      userName,\n    });\n\n    // Retour des données utilisateur mises à jour\n    return updatedUserData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Error', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n\n\n\n\n// Fonction utilitaire pour effectuer une requête HTTP\nasync function makeApiRequest(url, method = 'GET', body = null) {\n  try {\n    const options = {\n      method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: body ? JSON.stringify(body) : null,\n    };\n\n    const response = await fetch(url, options);\n    const data = await response.json();\n\n    if (response.status === 200) {\n      return data;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    console.error('Erreur lors de la requête à l\\'API', error.message);\n    throw error;\n  }\n}\n\nexport const fetchAccount = createAsyncThunk('users/fetchAccount', async (_, thunkAPI) => {\n  try {\n    // URL de l'API pour récupérer les données du compte\n    const accountUrl = 'http://localhost:3001/api/v1/account';\n\n    // Utilisation de la fonction utilitaire pour effectuer la requête\n    const accountData = await makeApiRequest(accountUrl);\n\n    // Retour des données du compte\n    return accountData;\n  } catch (error) {\n    // Gestion des erreurs et rejet de la valeur avec un message d'erreur\n    console.error('Erreur lors de la récupération des données du compte', error.message);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Le reste de votre code Redux Toolkit...\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}