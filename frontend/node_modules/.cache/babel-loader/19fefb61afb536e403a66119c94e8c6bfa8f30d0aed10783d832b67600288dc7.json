{"ast":null,"code":"import { createReducer, createAction, configureStore } from '@reduxjs/toolkit';\n\n// Actions (Définition des actions Redux)\nexport const logIn = createAction('logIn'); // Action pour la connexion\nexport const logOut = createAction('logOut'); // Action pour la déconnexion\nexport const setUserData = createAction('setUserData'); // Action pour définir les données de l'utilisateur\nexport const updateUserData = createAction('updateUserData'); // Action pour mettre à jour les données de l'utilisateur\n\n// Initial state (État initial du réducteur)\nconst initialState = {\n  name: \"userReducer\",\n  connected: false,\n  // Indique si l'utilisateur est connecté ou non\n  JWTtoken: null,\n  // Token d'authentification JSON Web Token\n  userData: {} // Données de l'utilisateur\n};\n\n// Reducer (Définition du réducteur Redux)\nconst userReducer = createReducer(initialState, builder => {\n  builder.addCase(logIn, (draft, action) => {\n    // Gestion de l'action de connexion\n    if (!draft.connected) {\n      draft.connected = true;\n      draft.JWTtoken = action.payload; // Stocker le token d'authentification\n    }\n  }).addCase(logOut, draft => {\n    // Gestion de l'action de déconnexion\n    if (draft.connected) {\n      draft.connected = false;\n      draft.userData = {}; // Réinitialiser les données de l'utilisateur\n      draft.JWTtoken = null; // Réinitialiser le token d'authentification\n    }\n  }).addCase(setUserData, (draft, action) => {\n    // Gestion de l'action pour définir les données de l'utilisateur\n    draft.userData = action.payload; // Mettre à jour les données de l'utilisateur\n  }).addCase(updateUserData, (draft, action) => {\n    // Gestion de l'action pour mettre à jour les données de l'utilisateur\n    draft.userData.firstName = action.payload.firstName; // Mettre à jour le prénom\n    draft.userData.lastName = action.payload.lastName; // Mettre à jour le nom de famille\n  });\n});\n\n// Sélecteurs Redux (Fonctions pour sélectionner des données spécifiques depuis le store)\nexport const selectUserLogin = state => state.user.connected; // Sélectionne l'état de connexion de l'utilisateur\nexport const selectJWT = state => state.user.JWTtoken; // Sélectionne le JSON Web Token (JWT) de l'utilisateur\nexport const selectUserData = state => state.user.userData; // Sélectionne les données de l'utilisateur\nexport const selectFirstName = state => {\n  // Sélectionne le prénom de l'utilisateur\n  const userData = selectUserData(state);\n  return userData ? userData.firstName : '';\n};\nexport const selectLastName = state => {\n  // Sélectionne le nom de l'utilisateur\n  const userData = selectUserData(state);\n  return userData ? userData.lastName : '';\n};\n\n// Création et configuration du store Redux en utilisant configureStore\nexport const store = configureStore({\n  // Définition des réducteurs pour gérer les différentes parties de l'état de l'application\n  reducer: {\n    user: userReducer // Utilisation du réducteur `userReducer` pour gérer l'état de l'utilisateur\n  }\n});","map":{"version":3,"names":["createReducer","createAction","configureStore","logIn","logOut","setUserData","updateUserData","initialState","name","connected","JWTtoken","userData","userReducer","builder","addCase","draft","action","payload","firstName","lastName","selectUserLogin","state","user","selectJWT","selectUserData","selectFirstName","selectLastName","store","reducer"],"sources":["/Users/johannacastagna/Documents/Projet_11/frontend/src/store/store.jsx"],"sourcesContent":["import { createReducer, createAction, configureStore } from '@reduxjs/toolkit';\n\n// Actions (Définition des actions Redux)\nexport const logIn = createAction('logIn'); // Action pour la connexion\nexport const logOut = createAction('logOut'); // Action pour la déconnexion\nexport const setUserData = createAction('setUserData'); // Action pour définir les données de l'utilisateur\nexport const updateUserData = createAction('updateUserData'); // Action pour mettre à jour les données de l'utilisateur\n\n// Initial state (État initial du réducteur)\nconst initialState = {\n    name: \"userReducer\",\n    connected: false, // Indique si l'utilisateur est connecté ou non\n    JWTtoken: null, // Token d'authentification JSON Web Token\n    userData: {}, // Données de l'utilisateur\n}\n\n// Reducer (Définition du réducteur Redux)\nconst userReducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(logIn, (draft, action) => { // Gestion de l'action de connexion\n            if (!draft.connected) {\n                draft.connected = true;\n                draft.JWTtoken = action.payload; // Stocker le token d'authentification\n            }\n        })\n        .addCase(logOut, (draft) => { // Gestion de l'action de déconnexion\n            if (draft.connected) {\n                draft.connected = false;\n                draft.userData = {}; // Réinitialiser les données de l'utilisateur\n                draft.JWTtoken = null; // Réinitialiser le token d'authentification\n            }\n        })\n        .addCase(setUserData, (draft, action) => { // Gestion de l'action pour définir les données de l'utilisateur\n            draft.userData = action.payload; // Mettre à jour les données de l'utilisateur\n        })\n        .addCase(updateUserData, (draft, action) => { // Gestion de l'action pour mettre à jour les données de l'utilisateur\n            draft.userData.firstName = action.payload.firstName; // Mettre à jour le prénom\n            draft.userData.lastName = action.payload.lastName; // Mettre à jour le nom de famille\n        })\n})\n\n// Sélecteurs Redux (Fonctions pour sélectionner des données spécifiques depuis le store)\nexport const selectUserLogin = (state) => state.user.connected; // Sélectionne l'état de connexion de l'utilisateur\nexport const selectJWT = (state) => state.user.JWTtoken; // Sélectionne le JSON Web Token (JWT) de l'utilisateur\nexport const selectUserData = (state) => state.user.userData; // Sélectionne les données de l'utilisateur\nexport const selectFirstName = (state) => { // Sélectionne le prénom de l'utilisateur\n  const userData = selectUserData(state);\n  return userData ? userData.firstName : '';\n};\nexport const selectLastName = (state) => { // Sélectionne le nom de l'utilisateur\n  const userData = selectUserData(state);\n  return userData ? userData.lastName : '';\n};\n\n// Création et configuration du store Redux en utilisant configureStore\nexport const store = configureStore({\n  // Définition des réducteurs pour gérer les différentes parties de l'état de l'application\n  reducer: {\n    user: userReducer, // Utilisation du réducteur `userReducer` pour gérer l'état de l'utilisateur\n  },\n});\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,YAAY,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9E;AACA,OAAO,MAAMC,KAAK,GAAGF,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;AAC5C,OAAO,MAAMG,MAAM,GAAGH,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC9C,OAAO,MAAMI,WAAW,GAAGJ,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;AACxD,OAAO,MAAMK,cAAc,GAAGL,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;;AAE9D;AACA,MAAMM,YAAY,GAAG;EACjBC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAE,KAAK;EAAE;EAClBC,QAAQ,EAAE,IAAI;EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC,CAAE;AAClB,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGZ,aAAa,CAACO,YAAY,EAAGM,OAAO,IAAK;EACzDA,OAAO,CACFC,OAAO,CAACX,KAAK,EAAE,CAACY,KAAK,EAAEC,MAAM,KAAK;IAAE;IACjC,IAAI,CAACD,KAAK,CAACN,SAAS,EAAE;MAClBM,KAAK,CAACN,SAAS,GAAG,IAAI;MACtBM,KAAK,CAACL,QAAQ,GAAGM,MAAM,CAACC,OAAO,CAAC,CAAC;IACrC;EACJ,CAAC,CAAC,CACDH,OAAO,CAACV,MAAM,EAAGW,KAAK,IAAK;IAAE;IAC1B,IAAIA,KAAK,CAACN,SAAS,EAAE;MACjBM,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACJ,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;MACrBI,KAAK,CAACL,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC3B;EACJ,CAAC,CAAC,CACDI,OAAO,CAACT,WAAW,EAAE,CAACU,KAAK,EAAEC,MAAM,KAAK;IAAE;IACvCD,KAAK,CAACJ,QAAQ,GAAGK,MAAM,CAACC,OAAO,CAAC,CAAC;EACrC,CAAC,CAAC,CACDH,OAAO,CAACR,cAAc,EAAE,CAACS,KAAK,EAAEC,MAAM,KAAK;IAAE;IAC1CD,KAAK,CAACJ,QAAQ,CAACO,SAAS,GAAGF,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC,CAAC;IACrDH,KAAK,CAACJ,QAAQ,CAACQ,QAAQ,GAAGH,MAAM,CAACC,OAAO,CAACE,QAAQ,CAAC,CAAC;EACvD,CAAC,CAAC;AACV,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,eAAe,GAAIC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACb,SAAS,CAAC,CAAC;AAChE,OAAO,MAAMc,SAAS,GAAIF,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACZ,QAAQ,CAAC,CAAC;AACzD,OAAO,MAAMc,cAAc,GAAIH,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACX,QAAQ,CAAC,CAAC;AAC9D,OAAO,MAAMc,eAAe,GAAIJ,KAAK,IAAK;EAAE;EAC1C,MAAMV,QAAQ,GAAGa,cAAc,CAACH,KAAK,CAAC;EACtC,OAAOV,QAAQ,GAAGA,QAAQ,CAACO,SAAS,GAAG,EAAE;AAC3C,CAAC;AACD,OAAO,MAAMQ,cAAc,GAAIL,KAAK,IAAK;EAAE;EACzC,MAAMV,QAAQ,GAAGa,cAAc,CAACH,KAAK,CAAC;EACtC,OAAOV,QAAQ,GAAGA,QAAQ,CAACQ,QAAQ,GAAG,EAAE;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMQ,KAAK,GAAGzB,cAAc,CAAC;EAClC;EACA0B,OAAO,EAAE;IACPN,IAAI,EAAEV,WAAW,CAAE;EACrB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}